MISC
	 0 : HLT   : stop the machine
	 1 : NOP   : no operation, IP++
	 2 : PUTC  : print R char to console (0 for newline)
	 3 : PRINT : print R integer to console (debug)
	 4 : READC : read char from console to R
	 5 : READI : read int from console to R (debug)
	 6 : SLEEP : sleep R milliseconds
	 7 : TIM   : write sysmillis to R
	
MATH
 operands are popped from the stack, operation result is stored in R and pushed on the stack

	ARITHMETIC
	 8 : MUL : *
	 9 : DIV : /
	10 : REM : %
	11 : ADD : +
	12 : SUB : -          
		
	LOGICAL	
	13 : LESS    : <   
	14 : LESSEQ  : <=
	15 : GREAT   : >
	16 : GREATEQ : >=
	17 : EQU     : ==
	18 : NEQ     : !=
	19 : AND     : &&
	20 : OR      : ||
	21 : NOT     : !
	
STACK
	22 : SSP   : SP = R
	23 : LFS N : load from stack (R = MEM[SP + N])
	24 : STS N : store to  stack (MEM[SP + N] = R)
	25 : PUSH  : MEM[SP] = R; SP--
	26 : POP   : SP++; R = MEM[SP];
	
MEMORY 
	27 : LDR  ADDR : R = MEM[ADDR]
	28 : STR  ADDR : MEM[ADDR] = R 
	29 : RB        : R = B
	30 : BR        : B = R
	31 : LDRA ADDR : R = ADDR
	32 : LDBA      : R = MEM[B]
	33 : STBA      : MEM[B] = R 
	
JUMPING
	34 : JMP ADDR : IP = ADDR
	35 : JZ  ADDR : if (R == 0) { IP = ADDR } 
	36 : JNZ ADDR : if (R != 0) { IP = ADDR } 
	
PROCEDURES

	37 : CALL ADDR      : push ret addr on stack, IP = ADDR
    38 : CLS NUM_PARAMS : SP += N (use to clear the stack after proc CALL)	
	39 : RET            : SP++; IP = MEM[SP]; return from procedure
	